{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hey, I'm Jacob. I'm a high schooler in NYC interested in mobile application and operating systems security. Take a look at my reading list.</p>"},{"location":"reading-list/","title":"Reading List","text":"<ul> <li>Blue Fox: Arm Assembly Internals and Reverse Engineering by Maria Markstedter, 2023</li> <li>The Art of Mac Malware duology by Patrick Wardle, 2022/2025</li> <li>OS internals trilogy by Jonathan Levin, 2017/2019/2017</li> <li>The Art of Computer Virus Research and Defense by Peter Szor, 2005</li> <li>Reversing: Secrets of Reverse Engineering by Eldad Eliam, 2005</li> <li>OS X Incident Response: Scripting and Analysis by Jaron Bradley, 2016</li> <li>Mac OS X Internals by Amit Singh, 2006</li> <li>DisARMing Code by Jonathan Levin, 2025</li> </ul>"},{"location":"2025/07/30/reversing-macos-26s-icon/","title":"Reversing macOS 26's <code>.icon</code>","text":"<p>With the release of MacOS 26 (Tahoe), we now have an additional application bundled with Xcode 26; Icon Composer. Icon Composer lets developers create \"layered icons out of Liquid Glass from a single design\" in a new multi-layer format. This introduces the <code>.icon</code> extension, the standard format from Icon Composer. These files can then be imported into Xcode 26, and specified in the <code>App Icons and Launch Screen</code> settings for your project.</p> <p>With this new proprietary format, we'll need to understand how the icons are stored and bundled to implement support for <code>.icon</code> files in our applications.</p> <p>The <code>.icon</code> file itself is simply a folder, in which there is an <code>icon.json</code> file and an <code>assets</code> subfolder. This JSON file is what Icon Composer interprets. It's made up of key-value pairs pointing to files within <code>assets</code> within a <code>layers</code> object along with other icon details like <code>translucency</code>, an sRGB for the gradient, <code>shadow</code>, etc.</p> <p>See a sample <code>icon.json</code> for a simple icon made with Icon Composer: icon.json<pre><code>{\n  \"fill\" : {\n    \"automatic-gradient\" : \"extended-srgb:0.00000,0.47843,1.00000,1.00000\"\n  },\n  \"groups\" : [\n    {\n      \"layers\" : [\n        {\n          \"image-name\" : \"mobile-solid.svg\",\n          \"name\" : \"mobile-solid\"\n        }\n      ],\n      \"shadow\" : {\n        \"kind\" : \"neutral\",\n        \"opacity\" : 0.5\n      },\n      \"translucency\" : {\n        \"enabled\" : true,\n        \"value\" : 0.5\n      }\n    }\n  ],\n  \"supported-platforms\" : {\n    \"circles\" : [\n      \"watchOS\"\n    ],\n    \"squares\" : \"shared\"\n  }\n}\n</code></pre></p> <p>As a takeaway, the <code>.icon</code> format seems simple to reproduce. In regards to implementation, we still see <code>.png</code> files within the <code>.app</code>, however the <code>assets.car</code> is signifigantly modified when working with <code>.icon</code> rather than the current <code>.xcassets</code>.</p>"},{"location":"archive/2025/","title":"2025","text":""}]}